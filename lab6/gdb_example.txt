Script started on Fri Oct 18 17:33:36 2019
[?1034hbash-3.2$ gdb ./overflow.c
[?1034h[35;1mGNU gdb (GDB) 8.3
[mCopyright (C) 2019 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-apple-darwin17.7.0".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
"/Volumes/BOOTCAMP/csc209/zhanzhih/lab6/./overflow.c": not in executable format: file format not recognized
(gdb) q
bash-3.2$ gdb ./overflow
[?1034h[35;1mGNU gdb (GDB) 8.3
[mCopyright (C) 2019 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-apple-darwin17.7.0".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from [32m./overflow[m...
Reading symbols from [32m/Volumes/BOOTCAMP/csc209/zhanzhih/lab6/overflow.dSYM/Contents/Resources/DWARF/overflow[m...
(gdb) break main
Breakpoint 1 at [34m0x100000bc4[m: file [32moverflow.c[m, line 7.
(gdb) list
1	#include <stdio.h>
2	
3	#define SIZE 4
4	#define OVERFLOW 5
5	
6	int main() {
7	    int index = 0;
8	    int i;
9	    int before[SIZE] = {10, 10, 10, 10};
10	    int a[SIZE] = {0, 0, 0, 0};
(gdb) list
11	    int after[SIZE] = {10, 10, 10, 10};
12	
13	    printf("Address of the variables:\n");
14	    for (index = 0; index < SIZE; index++) {
15	        printf("%lx -> &after[%d]\n", (unsigned long) &after[index], index);
16	    }
17	    for (index = 0; index < SIZE; index++) {
18	        printf("%lx -> &a[%d]\n", (unsigned long) &a[index], index);
19	    }
20	    for (index = 0; index < SIZE; index++) {
(gdb) list[K[K[K[K
21	        printf("%lx -> &before[%d]\n", (unsigned long) &before[index], index);
22	    }
23	    printf("%lx -> &i\n", (unsigned long)&i);
24	    printf("%lx -> &index\n", (unsigned long)&index);
25	    printf("\n");
26	
27	
28	    printf("Initial values:\n");
29	    printf("i = %d\n", i);
30	    printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
(gdb) break [K[K[K[K[K[Klist
31	    printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
32	    printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
33	    printf("\n");
34	
35	
36	    for (i = 0; i < OVERFLOW; i++) {
37	        a[i] = i * 10;
38	        printf("i = %d\n", i);
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
(gdb) set [K[K[K[Kbreak 33
Breakpoint 2 at [34m0x100000da1[m: file [32moverflow.c[m, line 33.
(gdb) break 34[K6
Breakpoint 3 at [34m0x100000dae[m: file [32moverflow.c[m, line 36.
(gdb) continue
The program is not being run.
(gdb) run
Starting program: /Volumes/BOOTCAMP/csc209/zhanzhih/lab6/overflow 
[New Thread 0x1603 of process 824]
[New Thread 0x1703 of process 824]
warning: `/BuildRoot/Library/Caches/com.apple.xbs/Binaries/Libc_darwin/install/TempContent/Objects/Libc.build/libsystem_darwin.dylib.build/Objects-normal/x86_64/darwin_vers.o': can't open to read symbols: No such file or directory.
warning: `/BuildRoot/Library/Caches/com.apple.xbs/Binaries/Libc_darwin/install/TempContent/Objects/Libc.build/libsystem_darwin.dylib.build/Objects-normal/x86_64/dirstat.o': can't open to read symbols: No such file or directory.
warning: `/BuildRoot/Library/Caches/com.apple.xbs/Binaries/Libc_darwin/install/TempContent/Objects/Libc.build/libsystem_darwin.dylib.build/Objects-normal/x86_64/dirstat_collection.o': can't open to read symbols: No such file or directory.
warning: `/BuildRoot/Library/Caches/com.apple.xbs/Binaries/Libc_darwin/install/TempContent/Objects/Libc.build/libsystem_darwin.dylib.build/Objects-normal/x86_64/init.o': can't open to read symbols: No such file or directory.
warning: `/BuildRoot/Library/Caches/com.apple.xbs/Binaries/Libc_darwin/install/TempContent/Objects/Libc.build/libsystem_darwin.dylib.build/Objects-normal/x86_64/variant.o': can't open to read symbols: No such file or directory.

Thread 2 hit Breakpoint 1, [33mmain[m () at [32moverflow.c[m:7
7	    int index = 0;
(gdb) continue
Continuing.
Address of the variables:
7ffeefbff9e0 -> &after[0]
7ffeefbff9e4 -> &after[1]
7ffeefbff9e8 -> &after[2]
7ffeefbff9ec -> &after[3]
7ffeefbff9f0 -> &a[0]
7ffeefbff9f4 -> &a[1]
7ffeefbff9f8 -> &a[2]
7ffeefbff9fc -> &a[3]
7ffeefbffa00 -> &before[0]
7ffeefbffa04 -> &before[1]
7ffeefbffa08 -> &before[2]
7ffeefbffa0c -> &before[3]
7ffeefbff9d4 -> &i
7ffeefbff9d8 -> &index

Initial values:
i = 1
before = {10, 10, 10, 10}
a = {0, 0, 0, 0}
after = {10, 10, 10, 10}

Thread 2 hit Breakpoint 2, [33mmain[m () at [32moverflow.c[m:33
33	    printf("\n");
(gdb) continue
Continuing.


Thread 2 hit Breakpoint 3, [33mmain[m () at [32moverflow.c[m:36
36	    for (i = 0; i < OVERFLOW; i++) {
(gdb) before[[K[K[K[K[K[K[Kdisplay fb[K[Kbefore 
1: before = {10, 10, 10, 10}
(gdb) display af[K[Ka
2: a = {0, 0, 0, 0}
(gdb) display after
3: after = {10, 10, 10, 10}
(gdb) n
37	        a[i] = i * 10;
1: before = {10, 10, 10, 10}
2: a = {0, 0, 0, 0}
3: after = {10, 10, 10, 10}
(gdb) n
38	        printf("i = %d\n", i);
1: before = {10, 10, 10, 10}
2: a = {0, 0, 0, 0}
3: after = {10, 10, 10, 10}
(gdb) n
i = 0
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: before = {10, 10, 10, 10}
2: a = {0, 0, 0, 0}
3: after = {10, 10, 10, 10}
(gdb) n
before = {10, 10, 10, 10}
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: before = {10, 10, 10, 10}
2: a = {0, 0, 0, 0}
3: after = {10, 10, 10, 10}
(gdb) n
a = {0, 0, 0, 0}
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: before = {10, 10, 10, 10}
2: a = {0, 0, 0, 0}
3: after = {10, 10, 10, 10}
(gdb) n
after = {10, 10, 10, 10}
36	    for (i = 0; i < OVERFLOW; i++) {
1: before = {10, 10, 10, 10}
2: a = {0, 0, 0, 0}
3: after = {10, 10, 10, 10}
(gdb) n
37	        a[i] = i * 10;
1: before = {10, 10, 10, 10}
2: a = {0, 0, 0, 0}
3: after = {10, 10, 10, 10}
(gdb) n
38	        printf("i = %d\n", i);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 0, 0}
3: after = {10, 10, 10, 10}
(gdb) n
i = 1
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 0, 0}
3: after = {10, 10, 10, 10}
(gdb) n
before = {10, 10, 10, 10}
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 0, 0}
3: after = {10, 10, 10, 10}
(gdb) n
a = {0, 10, 0, 0}
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 0, 0}
3: after = {10, 10, 10, 10}
(gdb) n
after = {10, 10, 10, 10}
36	    for (i = 0; i < OVERFLOW; i++) {
1: before = {10, 10, 10, 10}
2: a = {0, 10, 0, 0}
3: after = {10, 10, 10, 10}
(gdb) n
37	        a[i] = i * 10;
1: before = {10, 10, 10, 10}
2: a = {0, 10, 0, 0}
3: after = {10, 10, 10, 10}
(gdb) n
38	        printf("i = %d\n", i);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 0}
3: after = {10, 10, 10, 10}
(gdb) n
i = 2
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 0}
3: after = {10, 10, 10, 10}
(gdb) n
before = {10, 10, 10, 10}
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 0}
3: after = {10, 10, 10, 10}
(gdb) n
a = {0, 10, 20, 0}
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 0}
3: after = {10, 10, 10, 10}
(gdb) n
after = {10, 10, 10, 10}
36	    for (i = 0; i < OVERFLOW; i++) {
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 0}
3: after = {10, 10, 10, 10}
(gdb) n
37	        a[i] = i * 10;
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 0}
3: after = {10, 10, 10, 10}
(gdb) n
38	        printf("i = %d\n", i);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 30}
3: after = {10, 10, 10, 10}
(gdb) n
i = 3
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 30}
3: after = {10, 10, 10, 10}
(gdb) n
before = {10, 10, 10, 10}
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 30}
3: after = {10, 10, 10, 10}
(gdb) n
a = {0, 10, 20, 30}
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 30}
3: after = {10, 10, 10, 10}
(gdb) n
after = {10, 10, 10, 10}
36	    for (i = 0; i < OVERFLOW; i++) {
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 30}
3: after = {10, 10, 10, 10}
(gdb) n
37	        a[i] = i * 10;
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 30}
3: after = {10, 10, 10, 10}
(gdb) n
38	        printf("i = %d\n", i);
1: before = {40, 10, 10, 10}
2: a = {0, 10, 20, 30}
3: after = {10, 10, 10, 10}
(gdb) p &([K[K[Krint 7[K&(after[[K[K[K[K[K[Kbefire[K[K[Kore[0])
$1 = (int *) [34m0x7ffeefbffa00[m
(gdb) print &(a[4])
$2 = (int *) [34m0x7ffeefbffa00[m
(gdb) q
A debugging session is active.

	Inferior 1 [process 824] will be killed.

Quit anyway? (y or n) y
bash-3.2$ quit
bash: quit: command not found
bash-3.2$ exit
exit

Script done on Fri Oct 18 17:41:39 2019
